1) What is the Collection framework in Java?

Ans:- The Collection Framework in Java is a set of classes and interfaces that implement commonly reusable collection data structures. These data structures are used to store, retrieve, 
      manipulate, and aggregate data. The framework standardizes how groups of objects, also called collections, are handled in Java.
      Here's an example of the Java Collection Framework using both ArrayList (from the List interface) and HashSet (from the Set interface).

2)  What is the difference between ArrayList and LinkedList?

Ans:- Here are  simple points that differentiate `ArrayList` and `LinkedList`:

I. **Underlying Data Structure**:
   - **ArrayList**: Uses a dynamic array to store elements.
   - **LinkedList**: Uses a doubly linked list to store elements.

II. **Access Speed**:
   - **ArrayList**: Faster for retrieving elements (`get(index)`) because it has direct access to elements by index.
   - **LinkedList**: Slower for retrieving elements as it has to traverse the list to reach a particular index.

III. **Insertion/Deletion**:
   - **ArrayList**: Slower for inserting or deleting elements, especially in the middle, as elements need to be shifted.
   - **LinkedList**: Faster for insertion or deletion in the middle, as it only involves changing the node pointers.

IV. **Memory Usage**:
   - **ArrayList**: Consumes less memory because it only stores the actual data.
   - **LinkedList**: Consumes more memory as each element stores data along with pointers to the next and previous elements.


3)  What is the difference between Iterator and ListIterator?

Ans:-   Here are  simple points differentiating `Iterator` and `ListIterator`:

I. **Traversal Direction**:
   - **Iterator**: Can only traverse the collection in **one direction** (forward).
   - **ListIterator**: Can traverse the collection in **both directions** (forward and backward).

II. **Modifying Elements**:
   - **Iterator**: Can only remove elements while iterating using the `remove()` method.
   - **ListIterator**: Can modify elements (`set()`), remove elements (`remove()`), and add new elements (`add()`) during iteration.

III. **Applicable Collections**:
   - **Iterator**: Can be used with any collection, such as `List`, `Set`, or `Map`.
   - **ListIterator**: Can only be used with `List` (e.g., `ArrayList`, `LinkedList`).

IV. **Index Information**:
   - **Iterator**: Does not provide any information about the index of the elements during iteration.
   - **ListIterator**: Provides information about the index of the next and previous elements with `nextIndex()` and `previousIndex()`.


5) What is the difference between Iterator and Enumeration?

Ans:- Here are four simple points differentiating `Iterator` and `Enumeration`:

I. **Traversal Direction**:
   - **Iterator**: Allows traversing elements in a **single direction** (forward).
   - **Enumeration**: Also allows traversing elements in **one direction** (forward).

II. **Element Modification**:
   - **Iterator**: Allows removing elements during iteration using the `remove()` method.
   - **Enumeration**: Does **not allow** element modification (no `remove()` method).

III. **Usage**:
   - **Iterator**: Is part of the **Java Collection Framework** and is used with modern collections like `List`, `Set`, etc.
   - **Enumeration**: Is a **legacy interface** used with older classes like `Vector` and `Hashtable`.

IV. **Method Names**:
   - **Iterator**: Uses methods like `hasNext()`, `next()`, and `remove()`.
   - **Enumeration**: Uses methods like `hasMoreElements()` and `nextElement()`.

6) What is the difference between HashSet and TreeSet?

Ans:- Here are four simple points differentiating `HashSet` and `TreeSet`:

I. **Ordering**:
   - **HashSet**: Does **not maintain any order** of elements. The elements are stored based on their hash codes.
   - **TreeSet**: Maintains elements in **sorted (ascending) order** according to their natural ordering or a provided comparator.

II. **Performance**:
   - **HashSet**: Provides better performance for **basic operations** (like add, remove, contains) with a time complexity of **O(1)** (constant time).
   - **TreeSet**: Has slower performance with a time complexity of **O(log n)** for add, remove, and contains due to the underlying tree structure.

III. **Null Values**:
   - **HashSet**: Allows **one null element**.
   - **TreeSet**: Does **not allow null elements** as it needs to compare elements to maintain order, and comparing `null` would throw a `NullPointerException`.

IV. **Underlying Data Structure**:
   - **HashSet**: Backed by a **HashMap**.
   - **TreeSet**: Backed by a **Red-Black Tree**, which is a self-balancing binary search tree.


7) What is the difference between Array and ArrayList?

Ans:- Here are the key differences between **Array** and **ArrayList** in point form:

I. **Size**:
   - **Array**: Has a **fixed size**. Once initialized, the size cannot be changed.
   - **ArrayList**: Is **dynamic in size**. It can grow or shrink as elements are added or removed.

II. **Type of Elements**:
   - **Array**: Can hold **both primitive types** (e.g., `int`, `char`) and objects.
   - **ArrayList**: Can only hold **objects** (cannot hold primitive types directly, but can use wrapper classes like `Integer` for primitives).

III. **Performance**:
   - **Array**: Provides **better performance** for fixed-size data since no resizing is needed.
   - **ArrayList**: Slightly slower as it requires resizing when the internal array is full.

IV. **Built-in Methods**:
   - **Array**: Does not provide methods like `add()`, `remove()`, or `contains()`. You have to handle these manually.
   - **ArrayList**: Provides many **useful methods** such as `add()`, `remove()`, `size()`, `contains()`, making it easier to work with.

8)  What is a Map in Java?

Ans:- In Java, a Map is a part of the Collection Framework that stores data in key-value pairs. It is used to map a unique key to a specific value, making it useful when you want to associate keys with values and perform lookups based on keys.


9) What are the commonly used implementations of Map in Java?

Ans:- Here are the  commonly used implementations of `Map` in Java:

I. **HashMap**:  
   - Unordered, allows one `null` key and multiple `null` values.  
   - Provides **O(1)** time complexity for basic operations.

II. **LinkedHashMap**:  
   - Maintains **insertion order**, allows one `null` key.  
   - Slightly slower than `HashMap`.

III. **TreeMap**:  
   - Maintains **sorted order** of keys.  
   - Does **not allow `null` keys**, allows multiple `null` values.

IV. **Hashtable**:  
   - **Synchronized** (thread-safe), does **not allow `null` keys or values**.  
   - Slower than `HashMap`, often replaced by `ConcurrentHashMap`.

10) What is the difference between HashMap and TreeMap?

Ans:- Here are the key differences between **HashMap** and **TreeMap**:

I. **Ordering**:
   - **HashMap**: Does **not maintain any order** of the keys.
   - **TreeMap**: Maintains keys in **sorted (ascending) order** based on their natural order or a custom comparator.

II. **Performance**:
   - **HashMap**: Offers **O(1)** time complexity for basic operations like put, get, and remove.
   - **TreeMap**: Provides **O(log n)** time complexity due to its tree structure.

III. **Null Keys**:
   - **HashMap**: Allows **one null key** and multiple null values.
   - **TreeMap**: Does **not allow null keys** but allows multiple null values.

IV. **Underlying Data Structure**:
   - **HashMap**: Backed by a **hash table**.
   - **TreeMap**: Backed by a **Red-Black Tree** (self-balancing binary search tree).

11) How do you check if a key exists in a Map in Java?

Ans:- To check if a key exists in a `Map` in Java, you can use the **`containsKey()`** method.

Here's how it works:

- **`containsKey(Object key)`**: This method returns `true` if the specified key is present in the `Map`, and `false` otherwise.

### Example:
```java
import java.util.HashMap;

public class MapKeyCheck {
    public static void main(String[] args) {
        // Creating a HashMap
        HashMap<String, Integer> map = new HashMap<>();
        map.put("Apple", 1);
        map.put("Banana", 2);
        map.put("Orange", 3);

        // Checking if a key exists
        if (map.containsKey("Banana")) {
            System.out.println("Key 'Banana' exists in the map.");
        } else {
            System.out.println("Key 'Banana' does not exist in the map.");
        }
    }
}
```

In this example, `map.containsKey("Banana")` will return `true`, indicating that the key "Banana" exists in the map.


        